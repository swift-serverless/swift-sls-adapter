service: swift-sprinter-rest-api
frameworkVersion: '3'
configValidationMode: warn

package:
    individually: true

custom:
    tableName: 'products-table-${sls:stage}'

provider:
    name: aws
    region: eu-west-1
    httpApi:
        payload: '2.0'
        cors: true
    # Use provided.al2 if you build with M1, provided if you build with x86_64
    runtime: provided.al2
    lambdaHashingVersion: "20201221"
    # Use arm64 if you build with M1, or x86_64 if you build with intel
    architecture: arm64
    environment:
        PRODUCTS_TABLE_NAME: '${self:custom.tableName}'
    iam:
        role:
            statements:
                - Effect: Allow
                  Action:
                    - logs:CreateLogGroup
                    - logs:CreateLogStream
                    - logs:PutLogEvents
                  Resource: "*"
                - Effect: Allow
                  Action:
                    - dynamodb:UpdateItem
                    - dynamodb:PutItem
                    - dynamodb:GetItem
                    - dynamodb:DeleteItem
                    - dynamodb:Query
                    - dynamodb:Scan
                    - dynamodb:DescribeTable
                  Resource:
                    - { Fn::GetAtt: [ProductsTable, Arn] }

layers:
    swift-lambda-runtime:
        path: ./build/swift-lambda-runtime
        name: aws-swift-sprinter-lambda-runtime
        description: AWS Lambda Custom Runtime for Swift-Sprinter

functions:
    createProducts:
        handler: build/Products.create
        package:
            individually: true
            patterns:
                - "!**/*"
                - "build/Products"
        memorySize: 256
        layers:
           - { Ref: "SwiftDashlambdaDashruntimeLambdaLayer" }
        description: "[${sls:stage}] post /products"
        events:
            - httpApi:
                path: /products
                method: post
    readProducts:
        handler: build/Products.read
        package:
            individually: true
            patterns:
                - "!**/*"
                - "build/Products"
        memorySize: 256
        layers:
            - { Ref: SwiftDashlambdaDashruntimeLambdaLayer }
        description: "[${sls:stage}] get /products/{sku}"
        events:
            - httpApi:
                path: /products/{sku}
                method: get
    updateProducts:
        handler: build/Products.update
        package:
            individually: true
            patterns:
                - "!**/*"
                - "build/Products"
        memorySize: 256
        layers:
            - { Ref: SwiftDashlambdaDashruntimeLambdaLayer }
        description: "[${sls:stage}] put /products"
        events:
            - httpApi:
                path: /products
                method: put
    deleteProducts:
        handler: build/Products.delete
        package:
            individually: true
            patterns:
                - "!**/*"
                - build/Products
        memorySize: 256
        layers:
            - { Ref: SwiftDashlambdaDashruntimeLambdaLayer }
        description: "[${sls:stage}] delete /products/{sku}"
        events:
            - httpApi:
                path: /products/{sku}
                method: delete
    listProducts:
        handler: build/Products.list
        package:
            individually: true
            patterns:
                - "!**/*"
                - "build/Products"
        memorySize: 256
        layers:
            - { Ref: SwiftDashlambdaDashruntimeLambdaLayer }
        description: "[${sls:stage}] get /products"
        events:
            - httpApi:
                path: /products
                method: get

resources:
    Resources:
        ProductsTable:
            Type: AWS::DynamoDB::Table
            Properties:
                TableName: ${self:custom.tableName}
                AttributeDefinitions:
                    - AttributeName: sku
                      AttributeType: S
                KeySchema:
                    - AttributeName: sku
                      KeyType: HASH
                BillingMode: PAY_PER_REQUEST
